clear; close all; clc;File = cell(10, 1);File{1} = 'datasets/ionosphere_train.mat';File{2} = 'datasets/ionosphere_test.mat';File{3} = 'datasets/isolet_train.mat';File{4} = 'datasets/isolet_test.mat';File{5} = 'datasets/liver_train.mat';File{6} = 'datasets/liver_test.mat';File{7} = 'datasets/mnist_train.mat';File{8} = 'datasets/mnist_test.mat';File{9} = 'datasets/mushroom_train.mat';File{10} = 'datasets/mushroom_test.mat';test_case = 9;   %1, 3, 5, 7, 9learning_data = File{test_case};fprintf('Logit Regression\n');fprintf('Test case is %s:\n', learning_data);load(learning_data);[N, D] = size(X);    %D: variant of X[N, K] = size(Y);    %K: variant of Y%add intercept term to XX = [ones(N, 1) X];initial_weight = zeros(D + 1, K);%compute initial cost[cost, gradient] = binaryCostFunction(initial_weight, X, Y);fprintf('Cost at initial weights (zeros): %f\n', cost);%fprintf('Gradient at initial theta (zeros): \n');%fprintf(' %f \n', gradient);%%%%%%%%% optimize using fminunc %%%%%%%%%%%%options = optimset('GradObj', 'on', 'MaxIter', 400);%estimate timet = cputime;[weight, cost] = fminunc(@(t)(binaryCostFunction(t, X, Y)), initial_weight, options);e = cputime - t;% Print final weightfprintf('Cost at weights found by fminunc: %f\n', cost);%fprintf('weights: \n');%fprintf(' %f \n', weight);fprintf('CPUtime without I/O for task is %.2f sec.\n', e);%Train data accuracyaccuracy = 0;for i = 1 : N  Y_cal = sigmoid(weight' * X(i, :)');  if (Y_cal > 0.5 && Y(i) == 1)    accuracy = accuracy + 1;  end  if (Y_cal <= 0.5 && Y(i) == 0)    accuracy = accuracy + 1;  endendaccuracy = accuracy / N;fprintf('Training data accuracy is %.2f%%\n\n', accuracy * 100);%Test data accuracytest_data = File{test_case + 1};load(test_data);test_num = size(X, 1);accuracy = 0;X = [ones(test_num, 1) X];for i = 1 : test_num  Y_cal = sigmoid(weight' * X(i, :)');  if (Y_cal > 0.5 && Y(i) == 1)    accuracy = accuracy + 1;  end  if (Y_cal <= 0.5 && Y(i) == 0)    accuracy = accuracy + 1;  end  %fprintf('Y_cal = %f, Y = %d\n', Y_cal, Y(i));endaccuracy = accuracy / test_num;fprintf('Test data accuracy is %.2f%%\n\n', accuracy * 100);